# VER: 1.0.1
priority -50

global !p
import vim

# local: ~/.vim/pack/vendor/start/vim-snippets/UltiSnips/sh.snippets
# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
	return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
	for scope in ["g", "b"]:
		for shell in ["bash", "posix", "sh", "kornshell"]:
			if testShell(scope, shell) == "1":
				if shell == "kornshell":
					return "ksh"
				if shell == "posix":
					return "sh"
				return shell
	return "sh"
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet snippet "Snippet que gera outro snippet" b
snippet ${1:trigger} "${2:description}" b
 ${3:conteudo_do_snippet}
`!p snip.rv = "endsnippet"`
endsnippet

snippet snip "Create Snippet"
snippet ${1:nome} "${2:COMENTARIO}"
${3:COMANDOS_SNIPPETS}
endsnipet

endsnippet

# Jogando a saida pro dev/null
snippet /dev " >/dev/null 2>&1" b
 >/dev/null 2>&1
endsnippet

snippet dev " >/dev/null 2>&1" b
${1:COMANDOS} >/dev/null 2>&1
endsnippet

snippet 2> ">dev/null 2>&1"
>/dev/null 2>&1
endsnippet


# Verificar conexao com o git
snippet testgit "Verifica conexao com o ssh do github"
function verificar_ssh_github() {
    echo "Verificando conexão SSH com o GitHub..."
    if ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
        echo -e "\033[32mConexão SSH com o GitHub está funcionando corretamente!\033[0m"
    else
        echo -e "\033[31mFalha na conexão SSH com o GitHub. Verifique sua chave SSH e tente novamente.\033[0m"
    fi
}

endsnippet



snippet vim "Comando pra instalar o vim."
# comando pra instalar o vim configurado
bash <(curl -sL "https://raw.githubusercontent.com/mauvadao4g/maudovim/refs/heads/main/instalador")
endsnippet

snippet timea "20241202_173015 - data para backup" b
# Backup de arquivos.
            timestamp=$(date +%Y%m%d_%H%M%S)

endsnippet

snippet bkpa "20241202_173015 - data para backup" b
# Backup de arquivos.
            timestamp=$(date +%Y%m%d_%H%M%S)
    mkdir -p ~/backup_${1:file}_$timestamp
endsnippet

snippet timestamp "20241202_173015 - Data para backup" b
        timestamp=$(date +%Y%m%d_%H%M%S)
endsnippet

snippet ext "Mostra somente a extencao do arquivo"
${1:arquivo}="file.txt"
extensao="\${${1:arquivo}##*.\}"  # Apenas a extensão

endsnippet

snippet nome "Mostra somente o nome do arquivo"
nome="file.txt"
${1:arquivo}="$\{${1:nome}%.*\}"    # Nome sem extensão

endsnippet



snippet # "Adiciona um comentario"
# ${1:COMENTARIO}

endsnippet

snippet #! "#!/usr/bin/env (!env)" b
`!p snip.rv = '#!/usr/bin/env ' + getShell() + "\n" `
endsnippet

snippet bin "#!/bin/bash"
#!/bin/bash

endsnippet

snippet sh "Cabecalho shell script"
#!/bin/bash
# MAUVADAO
# VER: 1.0.0

endsnippet

snippet shell "Cabecalho shell script"
#!/bin/bash
# MAUVADAO
# VER: 1.0.0

endsnippet


snippet bash "Cabecalho shell script"
#!/bin/bash
# MAUVADAO
# VER: 1.0.0

endsnippet

snippet sbash "safe bash options" b
#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
`!p snip.rv ='\n\n' `
endsnippet

snippet temp "Tempfile" b
${1:TMPFILE}="$(mktemp -t ${3:--suffix=${4:.SUFFIX}} ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`}.XXXXXX)"
${5:${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'}${6/(.+)/" 0               # EXIT\n/}${7/(.+)/trap "/}${7:rm -f '$${1/.*\s//}'; exit 1}${7/(.+)/" 2       # INT\n/}${8/(.+)/trap "/}${8:rm -f '$${1/.*\s//}'; exit 1}${8/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet /case|sw(itch)?/ "case .. esac (case)" rb
case ${1:word} in
	${2:pattern} )
		${0:${VISUAL}};;
esac
endsnippet

snippet elif "elif .. (elif)" b
elif ${2:[[ ${1:condition} ]]}; then
	${0:${VISUAL}}
endsnippet

snippet for "for ... done (for)" b
for (( i = 0; i < ${1:10}; i++ )); do
	${0:${VISUAL}}
done
endsnippet

snippet forin "for ... in ... done (forin)" b
for ${1:i}${2/.+/ in /}${2:words}; do
	${0:${VISUAL}}
done
endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
	$0`echo \\n`${1/['"`](.+)['"`]/$1/}
endsnippet

snippet /ift(est)?/ "if ... then (if)" rb
if ${2:[ ${1:condition} ]}; then
	${0:${VISUAL}}
fi
endsnippet

snippet if "if ... then (if)" b
if [[ ${1:condition} ]]; then
	${0:${VISUAL}}
fi
endsnippet

snippet until "until ... (done)" b
until ${2:[[ ${1:condition} ]]}; do
	${0:${VISUAL}}
done
endsnippet

snippet /wh(ile)?/ "while ... (done)" rb
while ${2:[[ ${1:condition} ]]}; do
	${0:${VISUAL}}
done
endsnippet

snippet func "function() {...}" b
${1:function} () {
	${0:${VISUAL}}
}
endsnippet

snippet iff "if inline"
# Verificando condicao
[[ ${1:condition} ]] && {
	${2:VISUAL}
}
endsnippet

snippet filee "Verifica se o file existe"
# verificando se o file existe
file="${1:FILE}"
[[ -f "$file" ]] && { echo 'File encontrado'; }
endsnippet

snippet filen "Se o file nao existe"
# Se o file nao existir faça o comando.
file="${1:FILE}"
[[ ! -f "$file" ]] && { echo'File não existe'; }
endsnippet


snippet ife "Verifica se o file existe"
# se for verdadeiro
[[ ${1:CONDICAO} ]] && { ${2:COMANDOS}; }
endsnippet

snippet ifn "Se o file nao existe"
# se nao for verdadeiro.
[[ ${1:CONDICAO} ]] && { ${2:COMANDOS}; }
endsnippet

snippet usada "Verificar se parâmetro está em uso" b
[[ -n "\$1" ]] && {
${1:Code}
  }
endsnippet


snippet root "Verificar root" b
[[ "$(whoami)" != "root" ]] && {
    echo -e "\033[1;33m[\033[1;31mErro\033[1;33m] \033[1;37m- \033[1;33mvocê precisa executar como root\033[0m"
    rm $HOME/Plus >/dev/null 2>&1
    exit 0
}
endsnippet


####################################################
# vim:ft=snippets:
